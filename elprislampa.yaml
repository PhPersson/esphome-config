esphome:
  name: elprislampa
  platform: esp32
  board: esp32-c3-devkitm-1
  project:
    name: PhPersson.elprislampa
    version: "1.0"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  ap:

dashboard_import:
  package_import_url: github://PhPersson/esphome-config/elprislampa.yaml@main
  import_full_config: True

captive_portal:
web_server:
  

api:

# Enable logging
logger:

# Enable OTA updates
ota:
  platform: esphome

light:
  - platform: neopixelbus
    type: GRB
    pin: GPIO3
    num_leds: 7
    variant: WS2812
    name: "Elpris Indicator"
    id: elpris_lampa

number:
  - platform: template
    name: "High Price Threshold"
    id: high_price_threshold
    min_value: 0.0
    max_value: 2.0
    step: 0.01
    unit_of_measurement: "SEK"
    optimistic: true
    on_value:
      then:
        - lambda: |-
            float elpris = id(elpriset).state;
            float high_threshold = id(high_price_threshold).state;

            if (elpris > high_threshold) {
              // If the price is high, turn the light red
              auto call = id(elpris_lampa).turn_on();
              call.set_transition_length(1000); // Transition in milliseconds
              call.set_brightness(1.0); // Full brightness
              call.set_color_mode(ColorMode::RGB); // Set color mode
              call.set_rgb(1.0, 0.0, 0.0); // Red color
              call.perform(); // Perform the action
            } else {
              // If the price is low (<= threshold), turn the light green
              auto call = id(elpris_lampa).turn_on();
              call.set_transition_length(1000); // Transition in milliseconds
              call.set_brightness(1.0); // Full brightness
              call.set_color_mode(ColorMode::RGB); // Set color mode
              call.set_rgb(0.0, 1.0, 0.0); // Green color
              call.perform(); // Perform the action
            }

sensor:
  - platform: homeassistant
    name: "Current Electricity Price"
    entity_id: sensor.nordpool_kwh_se4_sek_3_10_025
    id: elpriset
    on_value:
      then:
        - lambda: |-
            float elpris = id(elpriset).state;
            float high_threshold = id(high_price_threshold).state;

            if (elpris > high_threshold) {
              // If the price is high, turn the light red
              auto call = id(elpris_lampa).turn_on();
              call.set_transition_length(1000); // Transition in milliseconds
              call.set_brightness(1.0); // Full brightness
              call.set_color_mode(ColorMode::RGB); // Set color mode
              call.set_rgb(1.0, 0.0, 0.0); // Red color
              call.perform(); // Perform the action
            } else {
              // If the price is low (<= threshold), turn the light green
              auto call = id(elpris_lampa).turn_on();
              call.set_transition_length(1000); // Transition in milliseconds
              call.set_brightness(1.0); // Full brightness
              call.set_color_mode(ColorMode::RGB); // Set color mode
              call.set_rgb(0.0, 1.0, 0.0); // Green color
              call.perform(); // Perform the action
            }
